# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import pigeon_feather
import sys

sys.path.insert(0, os.path.abspath('../../'))


# -- Project information -----------------------------------------------------

project = "pigeon_feather"
copyright = "2024, glasgowlab"
author = "Chenlin Lu"

# The full version, including alpha/beta/rc tags
release = "0.9"


# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx.ext.napoleon",
    "sphinx.ext.mathjax",
    "sphinx_issues",
    "myst_parser",
    "nbsphinx",
    'sphinx_copybutton',
]


def _preprocess_notebooks():
    """hooks into ExecutePreprocessor.preprocess to execute our own filters."""
    import nbsphinx
    from nbconvert.preprocessors import Preprocessor

    org_method = nbsphinx.Exporter.from_notebook_node

    class RemoveSolutionStubs(Preprocessor):
        """For rendering executed versions of the notebooks, we do not want to have the solution stubs."""

        def preprocess(self, nb, resources):
            filtered_cells = [
                cell
                for cell in nb["cells"]
                if not cell["metadata"].get("solution2_first", False)
            ]
            nb["cells"] = filtered_cells
            return nb, resources

    class NoExecuteLegacyNotebooks(Preprocessor):
        def preprocess(self, nb, resources):
            path = resources["metadata"]["path"]
            if "legacy-notebooks" in path:
                nb["metadata"]["nbsphinx"] = {"execute": "never"}
                self.log.info("disabled notebook execution: %s", path)
            return nb, resources

    def my_from_notebook_node(self, nb, resources, **kwargs):
        self.log.info("patched preprocessing method")
        filters = [
            RemoveSolutionStubs(),
            NoExecuteLegacyNotebooks(),
        ]
        for f in filters:
            nb, resources = f.preprocess(nb, resources=resources)

        return org_method(self, nb, resources=resources, **kwargs)

    nbsphinx.Exporter.from_notebook_node = my_from_notebook_node


# invoke method patch
_preprocess_notebooks()

nbsphinx_allow_errors = True
nbsphinx_timeout = 600

# execution is a long running operation, only turn it on if environment variable nbflags is set to '--execute'
if os.getenv("nbflags", "") == "--execute":
    nbsphinx_execute = "auto"
else:
    nbsphinx_execute = "never"


# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_rtd_theme"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# html_static_path = ['_static']

source_suffix = {
    ".rst": "restructuredtext",
    ".txt": "markdown",
    ".md": "markdown",
}

exclude_patterns = ["**.ipynb_checkpoints"]


# github_doc_root = 'https://github.com/your_username/your_project/blob/main/docs/'


# def setup(app):
#     app.add_config_value('recommonmark_config', {
#             'url_resolver': lambda url: github_doc_root + url,
#             'auto_toc_tree_section': 'Contents',
#         }, True)
#     app.add_transform(AutoStructify)
